/**
 * File has been automatically generated by `typo`.
 *
 * IF YOU CHANGE THIS FILE YOUR CHANGES WILL BE OVERWRITTEN.
 */
package adventureworks
package humanresources
package vjobcandidateemployment

import adventureworks.customtypes.TypoLocalDate
import adventureworks.humanresources.jobcandidate.JobcandidateId
import java.sql.ResultSet
import zio.jdbc.JdbcDecoder
import zio.json.JsonDecoder
import zio.json.JsonEncoder
import zio.json.ast.Json
import zio.json.internal.Write

/**
 *View: humanresources.vjobcandidateemployment */
case class VjobcandidateemploymentViewRow(
  /** Points to [[jobcandidate.JobcandidateRow.jobcandidateid]] */
  jobcandidateid: JobcandidateId,
  empStartDate: /* nullability unknown */ Option[TypoLocalDate],
  empEndDate: /* nullability unknown */ Option[TypoLocalDate],
  empOrgName: /* nullability unknown */ Option[/* max 100 chars */ String],
  empJobTitle: /* nullability unknown */ Option[/* max 100 chars */ String],
  empResponsibility: /* nullability unknown */ Option[String],
  empFunctionCategory: /* nullability unknown */ Option[String],
  empIndustryCategory: /* nullability unknown */ Option[String],
  empLocCountryRegion: /* nullability unknown */ Option[String],
  empLocState: /* nullability unknown */ Option[String],
  empLocCity: /* nullability unknown */ Option[String]
)

object VjobcandidateemploymentViewRow {
  implicit lazy val jdbcDecoder: JdbcDecoder[VjobcandidateemploymentViewRow] = new JdbcDecoder[VjobcandidateemploymentViewRow] {
    override def unsafeDecode(columIndex: Int, rs: ResultSet): (Int, VjobcandidateemploymentViewRow) =
      columIndex + 10 ->
        VjobcandidateemploymentViewRow(
          jobcandidateid = JobcandidateId.jdbcDecoder.unsafeDecode(columIndex + 0, rs)._2,
          empStartDate = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 1, rs)._2,
          empEndDate = JdbcDecoder.optionDecoder(TypoLocalDate.jdbcDecoder).unsafeDecode(columIndex + 2, rs)._2,
          empOrgName = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 3, rs)._2,
          empJobTitle = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 4, rs)._2,
          empResponsibility = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 5, rs)._2,
          empFunctionCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 6, rs)._2,
          empIndustryCategory = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 7, rs)._2,
          empLocCountryRegion = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 8, rs)._2,
          empLocState = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 9, rs)._2,
          empLocCity = JdbcDecoder.optionDecoder(JdbcDecoder.stringDecoder).unsafeDecode(columIndex + 10, rs)._2
        )
  }
  implicit lazy val jsonDecoder: JsonDecoder[VjobcandidateemploymentViewRow] = JsonDecoder[Json.Obj].mapOrFail { jsonObj =>
    val jobcandidateid = jsonObj.get("jobcandidateid").toRight("Missing field 'jobcandidateid'").flatMap(_.as(JobcandidateId.jsonDecoder))
    val empStartDate = jsonObj.get("Emp.StartDate").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDate.jsonDecoder)))
    val empEndDate = jsonObj.get("Emp.EndDate").fold[Either[String, Option[TypoLocalDate]]](Right(None))(_.as(JsonDecoder.option(using TypoLocalDate.jsonDecoder)))
    val empOrgName = jsonObj.get("Emp.OrgName").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empJobTitle = jsonObj.get("Emp.JobTitle").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empResponsibility = jsonObj.get("Emp.Responsibility").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empFunctionCategory = jsonObj.get("Emp.FunctionCategory").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empIndustryCategory = jsonObj.get("Emp.IndustryCategory").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empLocCountryRegion = jsonObj.get("Emp.Loc.CountryRegion").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empLocState = jsonObj.get("Emp.Loc.State").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    val empLocCity = jsonObj.get("Emp.Loc.City").fold[Either[String, Option[String]]](Right(None))(_.as(JsonDecoder.option(using JsonDecoder.string)))
    if (jobcandidateid.isRight && empStartDate.isRight && empEndDate.isRight && empOrgName.isRight && empJobTitle.isRight && empResponsibility.isRight && empFunctionCategory.isRight && empIndustryCategory.isRight && empLocCountryRegion.isRight && empLocState.isRight && empLocCity.isRight)
      Right(VjobcandidateemploymentViewRow(jobcandidateid = jobcandidateid.toOption.get, empStartDate = empStartDate.toOption.get, empEndDate = empEndDate.toOption.get, empOrgName = empOrgName.toOption.get, empJobTitle = empJobTitle.toOption.get, empResponsibility = empResponsibility.toOption.get, empFunctionCategory = empFunctionCategory.toOption.get, empIndustryCategory = empIndustryCategory.toOption.get, empLocCountryRegion = empLocCountryRegion.toOption.get, empLocState = empLocState.toOption.get, empLocCity = empLocCity.toOption.get))
    else Left(List[Either[String, Any]](jobcandidateid, empStartDate, empEndDate, empOrgName, empJobTitle, empResponsibility, empFunctionCategory, empIndustryCategory, empLocCountryRegion, empLocState, empLocCity).flatMap(_.left.toOption).mkString(", "))
  }
  implicit lazy val jsonEncoder: JsonEncoder[VjobcandidateemploymentViewRow] = new JsonEncoder[VjobcandidateemploymentViewRow] {
    override def unsafeEncode(a: VjobcandidateemploymentViewRow, indent: Option[Int], out: Write): Unit = {
      out.write("{")
      out.write(""""jobcandidateid":""")
      JobcandidateId.jsonEncoder.unsafeEncode(a.jobcandidateid, indent, out)
      out.write(",")
      out.write(""""Emp.StartDate":""")
      JsonEncoder.option(using TypoLocalDate.jsonEncoder).unsafeEncode(a.empStartDate, indent, out)
      out.write(",")
      out.write(""""Emp.EndDate":""")
      JsonEncoder.option(using TypoLocalDate.jsonEncoder).unsafeEncode(a.empEndDate, indent, out)
      out.write(",")
      out.write(""""Emp.OrgName":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empOrgName, indent, out)
      out.write(",")
      out.write(""""Emp.JobTitle":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empJobTitle, indent, out)
      out.write(",")
      out.write(""""Emp.Responsibility":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empResponsibility, indent, out)
      out.write(",")
      out.write(""""Emp.FunctionCategory":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empFunctionCategory, indent, out)
      out.write(",")
      out.write(""""Emp.IndustryCategory":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empIndustryCategory, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.CountryRegion":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empLocCountryRegion, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.State":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empLocState, indent, out)
      out.write(",")
      out.write(""""Emp.Loc.City":""")
      JsonEncoder.option(using JsonEncoder.string).unsafeEncode(a.empLocCity, indent, out)
      out.write("}")
    }
  }
}
